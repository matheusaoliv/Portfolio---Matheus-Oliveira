<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/criar_repo_github.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/criar_repo_github.bat" />
              <option name="originalContent" value="@echo off&#10;setlocal EnableExtensions&#10;chcp 65001 &gt;nul&#10;pushd &quot;%~dp0&quot;&#10;&#10;echo(&#10;echo == Criar e publicar no GitHub ==&#10;&#10;set REPO_SLUG=matheusaoliv/Portfolio---Matheus-Oliveira&#10;set REPO_URL=https://github.com/%REPO_SLUG%.git&#10;&#10;:: Se uma URL foi passada como argumento, usar ela (ex.: git@github.com:usuario/repo.git)&#10;if not &quot;%~1&quot;==&quot;&quot; set REPO_URL=%~1&#10;&#10;echo Repositorio: %REPO_SLUG%&#10;echo Remote URL: %REPO_URL%&#10;&#10;echo(&#10;where.exe git &gt;nul 2&gt;nul&#10;if errorlevel 1 goto :NO_GIT&#10;&#10;:: Inicializa repo se nao existir&#10;if not exist &quot;.git&quot; (&#10;  echo Inicializando repositorio Git...&#10;  git init&#10;)&#10;&#10;:: Detecta branch atual (pode estar vazio em repos iniciais)&#10;set &quot;CURBR=&quot;&#10;for /f &quot;tokens=*&quot; %%b in ('git branch --show-current 2^&gt;nul') do set CURBR=%%b&#10;if not &quot;%CURBR%&quot;==&quot;&quot; echo Branch atual: %CURBR%&#10;&#10;echo Adicionando arquivos e criando commit...&#10;Git add -A&#10;git commit -m &quot;chore: initial publish&quot;&#10;if errorlevel 1 goto :COMMIT_FAIL&#10;&#10;goto :POST_COMMIT&#10;&#10;:COMMIT_FAIL&#10;set &quot;GIT_USER_NAME=&quot;&#10;for /f &quot;delims=&quot; %%u in ('git config --get user.name 2^&gt;nul') do set GIT_USER_NAME=%%u&#10;if &quot;%GIT_USER_NAME%&quot;==&quot;&quot; goto :NO_GIT_IDENTITY&#10;&#10;echo Nenhuma alteracao para commitar. Prosseguindo...&#10;&#10;:POST_COMMIT&#10;:: Garantir que a branch principal seja main&#10;Git branch -M main &gt;nul 2&gt;nul&#10;&#10;:: Verifica GitHub CLI&#10;set GH_AVAILABLE=0&#10;where.exe gh &gt;nul 2&gt;nul&#10;if not errorlevel 1 set GH_AVAILABLE=1&#10;&#10;if &quot;%GH_AVAILABLE%&quot;==&quot;1&quot; goto :WITH_GH&#10;&#10;goto :WITHOUT_GH&#10;&#10;:WITH_GH&#10;echo Verificando existencia do repositorio via GitHub CLI...&#10;Gh repo view &quot;%REPO_SLUG%&quot; &gt;nul 2&gt;nul&#10;if errorlevel 1 goto :GH_CREATE&#10;&#10;goto :GH_PUSH_EXISTING&#10;&#10;:GH_CREATE&#10;echo Repositorio nao existe. Criando e publicando...&#10;Gh repo create &quot;%REPO_SLUG%&quot; --public --source . --remote origin --push&#10;if errorlevel 1 goto :GH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:GH_PUSH_EXISTING&#10;echo Repositorio ja existe. Configurando remoto e enviando...&#10;Git remote remove origin &gt;nul 2&gt;nul&#10;Git remote add origin &quot;%REPO_URL%&quot;&#10;Git push -u origin main&#10;if errorlevel 1 goto :PUSH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:WITHOUT_GH&#10;echo GitHub CLI nao encontrado. Configurando remoto e enviando...&#10;Git remote remove origin &gt;nul 2&gt;nul&#10;Git remote add origin &quot;%REPO_URL%&quot;&#10;Git push -u origin main&#10;if errorlevel 1 goto :PUSH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:NO_GIT&#10;echo ERRO: Git nao encontrado. Instale em https://git-scm.com/downloads&#10;&#10;goto :END&#10;&#10;:NO_GIT_IDENTITY&#10;echo Commit falhou por falta de identidade do Git.&#10;echo Configure e execute novamente:&#10;echo   git config --global user.name &quot;Seu Nome&quot;&#10;echo   git config --global user.email &quot;seuemail@exemplo.com&quot;&#10;&#10;goto :END&#10;&#10;:GH_FAIL&#10;echo Falha ao criar/enviar com gh. Verifique autenticacao com: gh auth login&#10;&#10;goto :END&#10;&#10;:PUSH_FAIL&#10;echo Falha no push. Verifique URL remota, permissoes e autenticacao (HTTPS/SSH).&#10;&#10;goto :END&#10;&#10;:SUCCESS&#10;echo(&#10;echo Pronto! Repo: %REPO_URL%&#10;echo Uma action de deploy para GitHub Pages sera executada automaticamente.&#10;&#10;goto :END&#10;&#10;:END&#10;popd&#10;endlocal&#10;pause&#10;" />
              <option name="updatedContent" value="@echo off&#10;setlocal EnableExtensions&#10;chcp 65001 &gt;nul&#10;pushd &quot;%~dp0&quot;&#10;&#10;echo(&#10;echo == Criar e publicar no GitHub ==&#10;&#10;set REPO_SLUG=matheusaoliv/Portfolio---Matheus-Oliveira&#10;set REPO_URL=https://github.com/%REPO_SLUG%.git&#10;&#10;:: Se uma URL foi passada como argumento, usar ela (ex.: git@github.com:usuario/repo.git)&#10;if not &quot;%~1&quot;==&quot;&quot; set REPO_URL=%~1&#10;&#10;echo Repositorio: %REPO_SLUG%&#10;echo Remote URL: %REPO_URL%&#10;&#10;echo(&#10;where.exe git &gt;nul 2&gt;nul&#10;if errorlevel 1 goto :NO_GIT&#10;&#10;:: Inicializa repo se nao existir&#10;if not exist &quot;.git&quot; (&#10;  echo Inicializando repositorio Git...&#10;  git init&#10;)&#10;&#10;:: Detecta branch atual (pode estar vazio em repos iniciais)&#10;set &quot;CURBR=&quot;&#10;for /f &quot;tokens=*&quot; %%b in ('git branch --show-current 2^&gt;nul') do set CURBR=%%b&#10;if not &quot;%CURBR%&quot;==&quot;&quot; echo Branch atual: %CURBR%&#10;&#10;echo Adicionando arquivos e criando commit...&#10;Git add -A&#10;git commit -m &quot;chore: initial publish&quot;&#10;if errorlevel 1 goto :COMMIT_FAIL&#10;&#10;goto :POST_COMMIT&#10;&#10;:COMMIT_FAIL&#10;set &quot;GIT_USER_NAME=&quot;&#10;for /f &quot;delims=&quot; %%u in ('git config --get user.name 2^&gt;nul') do set GIT_USER_NAME=%%u&#10;if &quot;%GIT_USER_NAME%&quot;==&quot;&quot; goto :NO_GIT_IDENTITY&#10;&#10;echo Nenhuma alteracao para commitar. Prosseguindo...&#10;&#10;:POST_COMMIT&#10;:: Garantir que a branch principal seja main&#10;Git branch -M main &gt;nul 2&gt;nul&#10;&#10;:: Verifica GitHub CLI&#10;set GH_AVAILABLE=0&#10;where.exe gh &gt;nul 2&gt;nul&#10;if not errorlevel 1 set GH_AVAILABLE=1&#10;&#10;if &quot;%GH_AVAILABLE%&quot;==&quot;1&quot; goto :WITH_GH&#10;&#10;goto :WITHOUT_GH&#10;&#10;:WITH_GH&#10;echo Verificando existencia do repositorio via GitHub CLI...&#10;Gh repo view &quot;%REPO_SLUG%&quot; &gt;nul 2&gt;nul&#10;if errorlevel 1 goto :GH_CREATE&#10;&#10;goto :GH_PUSH_EXISTING&#10;&#10;:GH_CREATE&#10;echo Repositorio nao existe. Criando e publicando...&#10;Gh repo create &quot;%REPO_SLUG%&quot; --public --source . --remote origin --push&#10;if errorlevel 1 goto :GH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:GH_PUSH_EXISTING&#10;echo Repositorio ja existe. Configurando remoto e enviando...&#10;Git remote remove origin &gt;nul 2&gt;nul&#10;Git remote add origin &quot;%REPO_URL%&quot;&#10;Git push -u origin main&#10;if errorlevel 1 goto :PUSH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:WITHOUT_GH&#10;echo GitHub CLI nao encontrado. Configurando remoto e enviando...&#10;Git remote remove origin &gt;nul 2&gt;nul&#10;Git remote add origin &quot;%REPO_URL%&quot;&#10;Git push -u origin main&#10;if errorlevel 1 goto :PUSH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:NO_GIT&#10;echo ERRO: Git nao encontrado. Instale em https://git-scm.com/downloads&#10;&#10;goto :END&#10;&#10;:NO_GIT_IDENTITY&#10;echo Commit falhou por falta de identidade do Git.&#10;echo Configure e execute novamente:&#10;echo   git config --global user.name &quot;Seu Nome&quot;&#10;echo   git config --global user.email &quot;seuemail@exemplo.com&quot;&#10;&#10;goto :END&#10;&#10;:GH_FAIL&#10;echo Falha ao criar/enviar com gh. Verifique autenticacao com: gh auth login&#10;&#10;goto :END&#10;&#10;:PUSH_FAIL&#10;echo Falha no push. Verifique URL remota, permissoes e autenticacao (HTTPS/SSH).&#10;&#10;:: Tentar fallback automatico para HTTPS se a URL for SSH e ainda nao tentamos&#10;if &quot;%TRIED_HTTPS%&quot;==&quot;1&quot; goto :END&#10;set &quot;CONTAINS_SSH_1=%REPO_URL:git@github.com=%&quot;&#10;if not &quot;%CONTAINS_SSH_1%&quot;==&quot;%REPO_URL%&quot; goto :TRY_HTTPS&#10;set &quot;CONTAINS_SSH_2=%REPO_URL:ssh://=%&quot;&#10;if not &quot;%CONTAINS_SSH_2%&quot;==&quot;%REPO_URL%&quot; goto :TRY_HTTPS&#10;&#10;goto :END&#10;&#10;:TRY_HTTPS&#10;echo Tentando fallback para HTTPS...&#10;set TRIED_HTTPS=1&#10;set REPO_URL=https://github.com/%REPO_SLUG%.git&#10;echo Remote URL (fallback): %REPO_URL%&#10;Git remote remove origin &gt;nul 2&gt;nul&#10;Git remote add origin &quot;%REPO_URL%&quot;&#10;Git push -u origin main&#10;if errorlevel 1 goto :PUSH_FAIL&#10;&#10;goto :SUCCESS&#10;&#10;:SUCCESS&#10;echo(&#10;echo Pronto! Repo: %REPO_URL%&#10;echo Uma action de deploy para GitHub Pages sera executada automaticamente.&#10;&#10;goto :END&#10;&#10;:END&#10;popd&#10;endlocal&#10;pause" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>